python多任务—协程（一）

https://blog.csdn.net/weixin_41599977/article/details/93656042


主要内容:yield生成器的复习并实现协程的功能,greenlet库实现协程,gevent库
实现协程,asyncio异步协程的介绍,异步协程的创建与运行,任务的创建与运行,并发运行
gather/wait/as_complete/wait_for等方法的实现,异步协程的嵌套,await关键字的理解等

协程,又称为微线程,它是实现多任务的另一种方式,是比线程更小的执行单元
它自带CPU的上下文,这样只要在合适的时机,就可以把一个协程切换到另一个协程

在一个线程的某个函数中,可以在任何地方保存当前函数的一些临时变量等信息,
然后切换到另一个函数中执行,注意不是通过调用函数的方式做到的,并且
切换的次数以及什么时候再切换到原来的函数都有开发者自己确定


协程与线程的差异


在实现多任务时,线程切换从系统层面远不止保存和恢复CPU上下文那么简单

操作系统为了程序运行的高效性,每个线程都有自己的缓冲Cache等数据,
操作系统还会帮着做这些数据的恢复操作,所以线程的切换非常好性能.

但是协程的切换只是单纯地操作CPU的上下文,所以一秒钟切换上百万次系统都能抗住

在python中,yield(生成器)很容易实现,从一个函数切换到另一个函数

生成器的回顾,yield方法的执行流程


通过生成器实现生产者-消费者模型,生产者生产消息后,直接通过yield跳转到
消费者开始执行,带消费者执行完毕后,切换回生产者继续生产,效率极高

使用greenlet实现协程

CPU上下文切换月就是不同函数之间的切换


一个自动切换任务的模块gevent


其原理就是当一个greenlet遇到IO(比如网络,文件操作等)操作时,
比如访问网络,就自动切换到其他的greenlet,等到IO操作完成,
再在适当的时候切换回啦继续执行

由于IO操作非常耗时,经常使得程序处于等待状态,有了gevent就可以
自动切换协程,保证总有greenlet在运行


pip install gevent -i "https://pypi.doubanio.com/simple/"


在不加gevent.sleep(1)时,是3个greenlet依次运行,而不是交替运行的,

在添加gevent.sleep(1)后,程序运行到这里后,交出控制权,执行下一个协程
等待这个耗时完成后再重新回到上一个协程,运行结果时交替裕兴


monkey补丁不必强制使用gevent里面的sleep


异步协程

python中使用协程最多的是asyncio库

1.event_loop事件循环

相当于一个无限循环,可以把一些函数注册到这个事件循环上,但满足条件时,
就会调用对应的处理方法

2. coroutine协程

协程对象,只一个使用async关键字定义的函数,它的调用不会立即执行函数,
而是返回一个协程对象,协程对象需要注册到事件循环中,由事件循环调用


3. task任务

一个协程对象就是一个原生可以挂起的函数,任务则是对协程的进一步
封装,其中包含任务的各种状态

4. future:代表将来执行或没有执行的任务结果.它与task没有本质的区别

5.async/await关键字


python3.5用于定义协程的关键字,async定义一个协程,await用于挂起
阻塞的异步调用接口


1定义一个协程---loop---(将协程对象注册到loop中,并启动loop)
通过async定义一个协程,协程是一个对象,不能直接运行,需要把协程加入到时间循环
(loop),由loop在适当的时候调用协程



asyncio.get_event_loop()方法可以创建一个事件循环,
然后有run_until_complete(协程对象)将协程注册到事件循环中,并启动事件循环


run_until_complete根据传递的参数不同,返回结果也不听


1.run_until_complete()传递的是一个协程对象或task对象,则返回它们
finished的返回结果(前提是它们得有return的结果,否则返回None)


2. run_until_complete(asyncio.wait(多个协程对象或任务)),函数会
返回一个元组包括(done,pending),通过访问done里的task对象,获取返回值


3. run_until_complete(asyncio.gather(多个协程对象或任务)),
函数会返回一个列表,列表里面包括各个任务的返回结果,按顺序拍序列


python3.7以前调用异步函数的步骤:


1. 调用asyncio.get_event_loop()函数获取事件循环loop对象
2. 通过不同的策略调用loop.run_forever()方法或loop.run_until_complete()

方法执行异步函数


python3.7以后使用asyncio.run即可

此函数总是会创建一个新的事件循环并在结束时关闭它

它应当被用作asyncio程序的入口点,理想情况下应该只被调用一次


2. 创建一个task


协程对象不能直接运行,在注册事件循环的时候,其实是run_until_complete方法
将协程包装成了一个task对象,
所谓task对象就是Future类的子类,它保存了协程运行后的状态,
用于未来获取协程的结果





创建task后,task在加入事件循环之前是pending状态


isinstance()函数来判断一个对象是否是一个已知的类型,类似type()


1.type()不会认为子类是一种父类类型,不考虑继承关系
2. isinstace()会认为子类是一种父类类型,考虑继承关系

3. 绑定回调


在task执行完毕的时候可以获取执行的记过,回调的最后一个参数是future对昂,
通过这个对象可以获取协程的返回值,如果回调函数需要多个参数,可以通过
偏函数导入

coroutine执行结束时候会调用回调函数,并通过future获取协程返回(return)
的结果.创建的task和回调里面的future对象,实际上是同一个对象



当回调函数需要传递多个参数时,可以使用functools里面的partial方法

functools.partial(func,*args,**kwgs)函数装饰器,返回一个新的
partial对象.调用partial对象和调用被修饰的func相同,
只不过调用partial对象时传入的参数个数通常要少于调用func时传入的
参数格式.当一个函数func可以接收很多参数,而某一次使用只需要更改
其中一部分参数,其他的参数都保持不变时,partial对象就可以
将这些不变的对象冻结起来,这样调用partial对象时传入未冻结的
参数

partial对象调用func时连同已经被冻结的参数一同传给func函数,
从而可以简化调用过程


如果调用partial对象时提供了更多的参数,那么它们会被添加到args的
后面,如果提供了更多的关键字参数,那么它们将扩展或覆盖冻结的关键字参数

在不绑定回调函数的时候,当task处于finished的状态时,可以直接
读取task的result的值



定义一个协程(对象)---loop---(将协程对象注册到loop中,并启动loop,其实是将协程包装成(task))--创建一个task--绑定回调(future.result())--(阻塞和await)使用await可以正对耗时操作进行挂起,就像生成器里面的yield一样,函数让出控制权

task是asyncio.Future的子类

两种创建task的方法
task = asyncio.ensure_future(coroutine)
task= loop.create_task(coroutine_1) # 将协程对象加入到Loop
当回调函数需要传递多个参数时，可以使用functools里的partial方法（偏函数导入这些参数）

协程遇到await，事件循环就会挂起这个协程，执行别协程，直到其他协程也挂起或执行完毕，在进行下一个协程的执行

5. 嵌套协程

使用async可以定义协程,协程用于耗时的IO操作,也可以封装更多的IO操作过程,在一个协程中await另外一个协程实现洗成的其那套




4. 阻塞和await使用async可以定义协程对象,
使用await可以正对耗时操作进行挂起,就像生成器里面的yield一样,函数让出控制权

协程遇到await,事件循环就会挂起这个协程,执行别协程,
直到其他协程也挂起或关闭,在进行下一个协程的执行

如果一个对象可以在await语句中使用,那它及时可等待对象

耗时操作一般指IO操作:网络请求,文件读取等,使用asyncio.sleep模拟
耗时操作.协程的目的也是让这些IO操作异步化


4.1  并发运行任务 asyncio.gather
4.2 屏蔽取消操作 asyncio.shield()
4.3 超时 asyncio.wait_for()
4.4 简单等待 asyncio.wait()


5. 嵌套协程

使用async可以定义协程,协程用于耗时的IO操作,也可以封装更多的IO操作过程,在一个协程中await另外一个协程实现洗成的其那套

可等待对象:如果一个对象可以在await语句中使用,那么它就是可等待对象呢
许多asyncio API都被设计为接收可等待对象


可等待对象有三种类型:协程,任务和Future

协程:python中的协程属于可等待对象,所有可以在其他协程中被等待
任务是用来设置日程以便并发执行协程

当一个协程通过asyncio.create_task()等函数被打包成一个任务,该协程
将自动排入日程准备立即执行

Future对象
Future是一个特殊的低层级可等待对象,表示一个异步操作的最终结果
当一个Future对象被等待,这意味着协程将保持等待直到该Future
对象咋其他地方操作完成



异步的逻辑:
定义协程---创建loop---创建task(asyncio.create_task将协程打包成task)-task接入loop---用await(挂起当前任务,切换用的,类似生成器里yield切换函数的作用) 等待task



使用async可以定义协程,协程用于耗时的IO操作,也可以封装更多的IO操作过程,在一个协程中await另外一个协程实现洗成的其那套

可等待对象:如果一个对象可以在await语句中使用,那么它就是可等待对象呢
许多asyncio API都被设计为接收可等待对象


可等待对象有三种类型:协程,任务和Future

协程:python中的协程属于可等待对象,所有可以在其他协程中被等待
任务是用来设置日程以便并发执行协程

当一个协程通过asyncio.create_task()等函数被打包成一个任务,该协程
将自动排入日程准备立即执行


尝试使用协程写一个爬虫(协程还是函数维度的编程)

以后就多玩协程,线程.协程更好,值切换上下文;线程还要缓存,会有性能消耗
